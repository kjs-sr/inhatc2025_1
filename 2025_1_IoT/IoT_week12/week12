InfluxDB 및 Grafana 설치

InfluxDB 설치
1. InfluxDB download key using wget
명령어 :
wget -q https://repos.influxdata.com/influxdata-archive_compat.key
echo '393e8779c89ac8d958f81f942f9ad7fb82a25e133faddaf92e15b16e6ac9ce4c influxdata-archive_compat.key' | sha256sum -c && cat influxdata-archive_compat.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/influxdata-archive_compat.gpg > /dev/null
echo 'deb [signed-by=/etc/apt/trusted.gpg.d/influxdata-archive_compat.gpg] https://repos.influxdata.com/debian stable main' | sudo tee /etc/apt/sources.list.d/influxdata.list

2. Packages are up to date && install Influxdb
명령어 :
sudo apt-get update && sudo apt-get install influxdb -y

3. InfluxDB as a background service on startup
명령어 :
sudo service influxdb start

4. InfluxDB is status (service)
명령어 :
sudo service influxdb status

influxDB Database 생성
$ Influx
$ create database dust //dust 데이터베이스 생성
$ show databases //데이터베이스 목록 보기
$ exit

Grafana Installation
1. Install the prerequisite packages
명령어 :
sudo apt-get install -y apt-transport-https software-properties-common wget

2. Import the GPG key
명령어 :
sudo mkdir -p /etc/apt/keyrings/
wget -q -O - https://apt.grafana.com/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/grafana.gpg > /dev/null

3. To add a repository for stable releases, run the following command
명령어 :
echo "deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list

4. Run the following command to update the list of available packages
명령어 :
sudo apt-get update && sudo apt-get install grafana -y

5. Run the following command to server start
명령어 :
sudo systemctl start grafana-server

influxdb import with python
명령어 :
pip install influxdb
(hint: See PEP 668 for the detailed specification.)
(sudo rm /usr/lib/python3.11/EXTERNALLY-MANAGED)


[코드]
//코드 파일 생성
$ vim dustInfluxdb.py

import time
import requests, json
from influxdb import InfluxDBClient as influxdb
import serial

seri = serial.Serial('/dev/ttyACM0', baudrate = 9600, timeout = None)

while(True):
  time.sleep(1)
  if seri.in_waiting != 0:
    content = seri.readline()
    a = float(content.decode())
    data = [{ 'measurement' : 'dust', 'tags':{'InhaUni' : '2222',}, 'fields':{'dust':a,} }]
    client = None
    try:
      client = influxdb('localhost', 8086, 'root','root','dust')
      //ip, 포트, id, pwd, db_name
    except Exception as e:
      print("Exception" + str(e))
    if client is not None:
      try:
        client.write_points(data)
      except Exception as e:
        print("Exception" + str(e))
      finally:
        client.close()
    print(a)
    print("running influxdb OK")
=========================================

Grafana 접속
라즈베리파이 인터넷 접속
주소창 : localhost:3000 //자신의 주소 3000번 포트
기본 id, pwd : admin / admin

Grafana 설정
1. Connections -> Data sources
2. InfluxDB
3. InfluxDB 연결 설정 (http://localhost:8086)
4. Database : dust / User : root / password: root

Dashboards 설정
1. New -> New dashboard
2. Add visualization
3. 본인이 설정한 data source 지정
4. 아래와 같이 설정.
• select measurement -> dust
• tag -> inhaUni = 2222
• field(value) ->dust
=========================================

텔레그렘 봇에 출력되도록.

- handler 등록
application.add_handler(CommandHandler("dust",dustToInfluxDB))

- 함수 구현(코드입력)
import serial

seri = serial.Serial('/dev/ttyACM0', baudrate = 9600, timeout = None)

async def dustToInfluxDB(context: ContextTypes.DEFAULT_TYPE) -> None:
  if seri.in_waiting != 0:
      content = seri.readline()
      a = float(content.decode())
  job = context.job
  await context.bot.send_message(job.chat_id, text=f"Dust Sendsor Value! {a}")

- set_timer 수정
context.job_queue.run.repeating 부분의 alarm을 ardustToInfluxDB로 변경
